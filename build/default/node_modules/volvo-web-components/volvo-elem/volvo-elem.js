import { AppLocalizeBehavior } from "../../@polymer/app-localize-behavior/app-localize-behavior.js";
import { mixinBehaviors } from "../../@polymer/polymer/lib/legacy/class.js";
import { PolymerElement } from "../../@polymer/polymer/polymer-element.js";
import { volvoLogging } from "../volvo-logging/volvo-logging.js";
import { PropertyManager } from "./PropertyManager.js";
const base = mixinBehaviors([AppLocalizeBehavior], volvoLogging(PolymerElement));
export class VolvoElem extends base {
  static get is() {
    return 'volvo-elem';
  }

  ready() {
    super.ready();

    if (!VolvoElem.registeredComponents.has(this.constructor)) {
      this.registerUsage();
    }

    this.loadLanguageResource();
  }

  connectedCallback() {
    super.connectedCallback();
    VolvoElem.propertyManager.registerElement(this);
  }

  disconnectedCallback() {
    super.disconnectedCallback();
    VolvoElem.propertyManager.deregisterElement(this);
  }

  removeScope(property, value) {
    return VolvoElem.propertyManager.removeScope(property, value);
  }

  isPropertyAssignmentChange(change) {
    return change != null && !this.isArrayLengthChange(change) && !this.isArrayPropertyChange(change);
  }

  isArrayLengthChange(change) {
    return change != null && change.path.endsWith('.length');
  }

  isArrayPropertyChange(change) {
    return change != null && change.path.endsWith('.splices');
  }

  requestDataReload(type, action, ...additionalArgs) {
    this.dispatchEvent(new CustomEvent('data-reload-request', {
      bubbles: true,
      cancelable: true,
      composed: true,
      detail: {
        type,
        action,
        additionalArgs
      }
    }));
  }

  hasLanguageResource(component) {
    return component.hasOwnProperty('defaultResources');
  }

  loadLanguageResource() {
    const componentConstructor = this.constructor;

    if (componentConstructor != null && this.hasLanguageResource(componentConstructor)) {
      this.resources = componentConstructor.defaultResources;
    }
  }

  canRegisterUsage(component) {
    return component.hasOwnProperty('is');
  }

  registerUsage() {
    const componentConstructor = this.constructor;

    if (componentConstructor != null && this.canRegisterUsage(componentConstructor)) {
      this.logger.info(`Component ${componentConstructor.is}#${componentConstructor.version} created`, {
        group: 'versions',
        element: componentConstructor.is,
        version: componentConstructor.version
      });
      VolvoElem.registeredComponents.add(componentConstructor);
    }
  }

  static get version() {
    return "0.3.2";
  }

}
VolvoElem.registeredComponents = new Set();
VolvoElem.propertyManager = new PropertyManager();
window.customElements.define(VolvoElem.is, VolvoElem); //# sourceMappingURL=volvo-elem.js.map