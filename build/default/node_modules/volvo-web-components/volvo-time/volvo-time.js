import { html } from "../../@polymer/polymer/polymer-element.js";
import { VolvoElem } from "../volvo-elem/volvo-elem.js";
import "../volvo-theme/volvo-theme.js";
import { TimerManager } from "./TimerManager.js";
export class VolvoTime extends VolvoElem {
  connectedCallback() {
    super.connectedCallback();

    if (this.autoUpdate) {
      TimerManager.Instance.register(this);
    }
  }

  disconnectedCallback() {
    super.disconnectedCallback();

    if (this.autoUpdate) {
      TimerManager.Instance.deregister(this);
    }
  }

  _format(datetime, locale, localize) {
    if (!datetime) {
      this._formattedDateTime = '';
      return;
    }

    let formatted = '';

    if (this.relativeTime && localize != null) {
      formatted = this.getFormatted(datetime, locale || 'en-gb', localize);
    } else {
      if (this.dateOnly) {
        formatted = datetime.toLocaleDateString(locale);
      } else {
        formatted = datetime.toLocaleString(locale);

        if (!this.showSeconds) {
          formatted = formatted.replace(/\s(\d+.\d+).\d+/, ' $1');
        }
      }
    }

    this._formattedDateTime = formatted;
  }

  _autoUpdateChanged(newValue) {
    if (newValue) {
      TimerManager.Instance.register(this);
    } else {
      TimerManager.Instance.deregister(this);
    }
  }

  getFormatted(datetime, locale, localize) {
    const now = new Date();
    let formatted = '';
    const secondsPassed = (now.valueOf() - datetime.valueOf()) / 1000;
    const minutesPassed = Math.round(secondsPassed / 60);
    const hoursPassed = Math.round(minutesPassed / 60);
    const daysPassed = Math.round(hoursPassed / 24);

    if (this.dateOnly && now.getFullYear() === datetime.getFullYear() && now.getMonth() === datetime.getMonth() && now.getDay() === datetime.getDay()) {
      formatted = localize('today');
    } else if (secondsPassed < 60) {
      formatted = localize('justNow');
    } else if (secondsPassed < 120) {
      formatted = localize('aMinuteAgo');
    } else if (minutesPassed < 44) {
      formatted = localize('minutesAgo', 'minutes', minutesPassed.toFixed(0));
    } else if (hoursPassed < 2) {
      formatted = localize('anHourAgo');
    } else if (this.isYesterday(datetime)) {
      formatted = localize('yesterday');
    } else if (hoursPassed < 24) {
      formatted = localize('hoursAgo', 'hours', hoursPassed.toFixed(0));
    } else if (daysPassed <= 7) {
      formatted = localize('daysAgo', 'days', daysPassed.toFixed(0));
    } else {
      formatted = datetime.toLocaleDateString(locale);
    }

    return formatted;
  }

  isYesterday(datetime) {
    const now = new Date();
    const nextDay = new Date(datetime.valueOf() + 86400000);
    return now.getFullYear() === nextDay.getFullYear() && now.getMonth() === nextDay.getMonth() && now.getDay() === nextDay.getDay();
  }

  static get is() {
    return 'volvo-time';
  }

  static get globals() {
    return ['locale', 'language'];
  }

  static get properties() {
    return {
      datetime: {
        type: Date
      },
      showSeconds: {
        type: Boolean,
        value: false
      },
      dateOnly: {
        type: Boolean
      },
      relativeTime: {
        type: Boolean,
        value: false
      },
      autoUpdate: {
        type: Boolean,
        value: false,
        observer: '_autoUpdateChanged'
      },
      locale: {
        type: String
      },
      language: {
        type: String
      },
      _formattedDateTime: {
        type: String
      }
    };
  }

  static get observers() {
    return ['_format(datetime, locale, localize, relativeTime)'];
  }

  static get defaultResources() {
    return {
      'en-US': {
        justNow: 'just now',
        aMinuteAgo: 'a minute ago',
        minutesAgo: '{minutes} minutes ago',
        anHourAgo: 'an hour ago',
        hoursAgo: '{hours} hours ago',
        today: 'today',
        yesterday: 'yesterday',
        daysAgo: '{days} days ago'
      },
      'en-GB': {
        justNow: 'just now',
        aMinuteAgo: 'a minute ago',
        minutesAgo: '{minutes} minutes ago',
        anHourAgo: 'an hour ago',
        hoursAgo: '{hours} hours ago',
        today: 'today',
        yesterday: 'yesterday',
        daysAgo: '{days} days ago'
      },
      'sv-SE': {
        justNow: 'precis nu',
        aMinuteAgo: 'en minut sedan',
        minutesAgo: '{minutes} minuter sedan',
        anHourAgo: 'en timme sedan',
        hoursAgo: '{hours} timmar sedan',
        today: 'idag',
        yesterday: 'igår',
        daysAgo: '{days} dagar sedan'
      },
      'pt-BR': {
        justNow: 'agora mesmo',
        aMinuteAgo: 'um minuto atrás',
        minutesAgo: '{minutes} minutos atrás',
        anHourAgo: 'uma hora atrás',
        hoursAgo: '{hours} horas atrás',
        today: 'hoje',
        yesterday: 'ontem',
        daysAgo: '{days} dias atrás'
      },
      'fr-FR': {
        justNow: 'maintenant',
        aMinuteAgo: 'il y a une minute',
        minutesAgo: 'Il y a {minutes} minutes',
        anHourAgo: 'il y a une heure',
        hoursAgo: '{hours} heures plus tard',
        today: 'aujourd´hui',
        yesterday: 'hier',
        daysAgo: 'Il y a {days} jours'
      }
    };
  }

  static get version() {
    return "0.3.2";
  }

  static get template() {
    return html`<style>\n  :host {\n    display: inline-block;\n  }\n</style>\n[[_formattedDateTime]]\n`;
  }

}
window.customElements.define(VolvoTime.is, VolvoTime); //# sourceMappingURL=volvo-time.js.map