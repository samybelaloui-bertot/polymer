import { html } from "../../@polymer/polymer/polymer-element.js";
import { VolvoElem } from "../volvo-elem/volvo-elem.js";
import "../volvo-time/volvo-time.js";
import "./volvo-timeline-item.js";
export class VolvoTimeline extends VolvoElem {
  calcDrawData(data) {
    const fromDate = new Date();
    const toDay = new Date();
    let curDate = fromDate;
    const newData = this.selectDataToDraw(data, fromDate);

    if (newData && newData.length === 0) {
      this.drawData = [];
      return;
    }

    const toDate = newData[newData.length - 1].date;
    const drawData = [];

    while (curDate.getTime() >= toDate.getTime()) {
      const drawItem = this.getDrawItem(curDate, toDay, newData);

      if (!(drawItem.month === '' && drawItem.items.length === 0)) {
        drawData.push(drawItem);
      }

      let curMonth = curDate.getMonth();
      let curYear = curDate.getFullYear();

      if (curMonth === 0) {
        curYear--;
        curMonth = 11;
      } else {
        curMonth--;
      }

      curDate = new Date(curYear, curMonth + 1, 0, 23, 59, 59, 999);
    }

    this.drawData = drawData;
  }

  getCurrentDate() {
    return new Date();
  }

  getCurrentMonthShort() {
    const lang = this.language != null ? this.language.toLowerCase() : 'en-gb';
    return this.getCurrentDate().toLocaleString(lang, {
      month: 'long'
    }).slice(0, 3).toUpperCase();
  }

  selectDataToDraw(data, fromDate) {
    if (data == null) {
      return [];
    }

    data.sort((a, b) => {
      return b.date.getTime() - a.date.getTime();
    });
    const result = data.filter(item => {
      return fromDate > item.date;
    });

    if (result == null || result.length === 0) {
      return [];
    }

    return result;
  }

  getDrawItem(curDate, toDay, data) {
    const drawItem = {
      year: '',
      month: '',
      items: []
    };
    drawItem.year = curDate.getFullYear().toString();

    if (!(curDate.getFullYear() === toDay.getFullYear() && curDate.getMonth() === toDay.getMonth())) {
      const lang = this.language ? this.language.toLowerCase() : 'en-gb';
      drawItem.month = curDate.toLocaleString(lang, {
        month: 'long'
      }).slice(0, 3).toUpperCase();
    }

    const items = data.filter(item => {
      return item.date.getMonth() === curDate.getMonth() && item.date.getFullYear() === curDate.getFullYear();
    });
    drawItem.items = items;
    return drawItem;
  }

  static get observers() {
    return ['calcDrawData(data, language)'];
  }

  static get globals() {
    return ['locale', 'language'];
  }

  static get properties() {
    return {
      data: {
        type: Object,
        value: []
      },
      drawData: {
        type: Object
      },
      fromDate: {
        type: Object
      },
      toDate: {
        type: Object
      },
      locale: {
        type: String
      },
      language: {
        type: String
      }
    };
  }

  static get defaultResources() {
    return {
      'en-US': {
        Today: 'Today'
      },
      'en-GB': {
        Today: 'Today'
      },
      'sv-SE': {
        Today: 'Idag'
      },
      'pt-BR': {
        Today: 'Hoje'
      },
      'fr-FR': {
        Today: 'AujourdÂ´hui'
      }
    };
  }

  static get template() {
    return html`<style>\n  :host {\n    display: block;\n  }\n\n .item-group {\n  display: flex;\n  min-height: 52px;\n  align-items: flex-start;\n}\n\n.line {\n  position: absolute;\n  top: 20px;\n  bottom: 0;\n  width: 2px;\n  left: 52px;\n  background-color: var(--volvo-color-blue);\n  z-index: 0;\n}\n\n.grow {\n  flex-grow: 1;\n  align-items: left;\n}\n\n.item-tag {\n  display: flex;\n  align-items: center;\n  margin-top: 11px;\n  width: 72px;\n}\n\n.month-tag {\n  display: inline-block;\n  position: relative;\n  width: 36px;\n  margin-right: 12px;\n  text-align: right;\n  top: 6px;\n  @apply --volvo-text-caption-small;\n  color: var(--volvo-color-primary)\n}\n\n.circle {\n  position: relative;\n  border-radius: 50%;\n  width: 12px;\n  height: 12px;\n  top: 6px;\n  left: -3px;\n\n  background-color: var(--volvo-color-blue);\n  display: inline-block;\n  border-style: solid;\n  border-width: 2px;\n  border-color: white;\n  z-index: 1;\n}\n\n.circle-filled {\n  fill: var(--volvo-color-blue);\n}\n\n.circle-overlay {\n  fill: white;\n}\n\n.item {\n  margin-left: 0px;\n  margin-right: 12px;\n  height: 42px;\n  margin-bottom: 12px;\n  padding-bottom: 12px;\n}\n\n.today-row {\n  width: 252px;\n}\n\n.today-row-text {\n  position: relative;\n  top: 12px;\n  left: 10px;\n  @apply --volvo-text-body-small;\n}\n\n.today-row-date {\n  position: relative;\n  top: 12px;\n  left: 10px;\n  @apply --volvo-text-caption-small;\n}\n</style>\n\n<div class="container" style="position: relative;">\n  <div class="line">\n  </div>\n  <div class="item-group">\n    <div class="item-tag">\n      <span class="month-tag">[[getCurrentMonthShort(data, language)]]</span>\n      <svg class="circle" width="20" height="20">\n          <circle class="circle-filled" cx="6" cy="6" r="6" />\n      </svg>\n    </div>\n    <div class="grow">\n      <div class="item today-row">\n        <div class="today-row-text">[[localize('Today')]]</div>\n        <volvo-time class="today-row-date" datetime="[[getCurrentDate(data)]]" date-only></volvo-time>\n      </div>\n    </div>\n  </div>\n\n  <template is="dom-repeat" items="[[drawData]]">\n    <div class="item-group">\n      <div class="item-tag">\n        <span class="month-tag">[[item.month]]</span>\n        <template is="dom-if" if="[[item.month]]">\n        <svg class="circle" width="20" height="20">\n          <circle class="circle-filled" cx="6" cy="6" r="6" />\n          <circle class="circle-overlay" cx="6" cy="6" r="4" />\n        </svg>\n        </template>\n      </div>\n      <div class="grow">\n        <template is="dom-repeat" items="[[item.items]]">\n          <volvo-timeline-item class="item" icon="[[item.icon]]" header="[[item.header]]" date="[[item.date]]" info="[[item.info]]" event-type="[[item.eventType]]"></volvo-timeline-item>\n        </template>\n      </div>\n    </div>\n  </template>\n</div>\n`;
  }

}
window.customElements.define('volvo-timeline', VolvoTimeline); //# sourceMappingURL=volvo-timeline.js.map